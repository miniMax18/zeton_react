{
	"$schema": "https://json.schemastore.org/eslintrc.json",
	"plugins": ["@typescript-eslint", "import", "react-refresh"],
	"parserOptions": {
		//"tsconfigRootDir": __dirname <- in cjs this is possible to set but in json -> "project": ["**/tsconfig.json"]
		"project": ["**/tsconfig.json"]
	},
	//"ignores": ["vite.config.ts"],
	"extends": [
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking",
		"plugin:import/recommended",
		"plugin:import/typescript",
		"prettier",
		//"plugin:import/errors",
		//"plugin:import/warnings",
		"plugin:import/typescript"
		//"airbnb-base"
	],
	"settings": {
		"import/resolver": {
		  "alias": {
			"map": [
			  ["@", "./src"]
			]
		  }
		}
	  },
	
	"rules": {
		// sort imports
		"import/order": "error",

		// no let exports
		"import/no-mutable-exports": "error",

		"import/no-cycle": "error",
		"import/no-default-export": "error",

		// allow {} even though it's unsafe but comes handy
		"@typescript-eslint/ban-types": [
			"error",
			{
				"types": {
					"{}": false
				}
			}
		],

		"@typescript-eslint/consistent-type-imports": [
			"error",
			{
				"prefer": "type-imports",
				"fixStyle": "inline-type-imports",
				"disallowTypeAnnotations": false
			}
		],

		"import/no-duplicates": ["error", { "prefer-inline": true }],

		// false negatives
		"import/namespace": ["off"],

		// we allow empty interfaces
		"no-empty-pattern": "off",
		"@typescript-eslint/no-empty-interface": "off",

		// we allow empty functions
		"@typescript-eslint/no-empty-function": "off",

		// we sometimes use async functions that don't await anything
		"@typescript-eslint/require-await": "off",

		// make sure to `await` inside tryâ€¦catch
		//see how to fix https://typescript-eslint.io/rules/return-await/
		"no-return-await": "off",
    	"@typescript-eslint/return-await": "error",
		//"@typescript-eslint/return-await": ["error", "in-try-catch"],
		


		// allow unused vars prefixed with `_`
		"@typescript-eslint/no-unused-vars": [
			"error",
			{ "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }
		],

		// numbers and booleans are fine in template strings
		"@typescript-eslint/restrict-template-expressions": [
			"error",
			{ "allowNumber": true, "allowBoolean": true }
		]
	},
	"overrides": [
		{
			"files": ["src/**/*.ts?(x)"],
			"rules": {
				"import/no-default-export": "off"
			}
		}
	],
	"ignorePatterns": ["*.js", "*.jsx"]	
}
